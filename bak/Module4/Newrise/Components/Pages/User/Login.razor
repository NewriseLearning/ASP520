@page "/login"
@inject IWebHostEnvironment Environment
@inject ParticipantDataService ParticipantDataService
@inject NavigationManager NavigationManager

@if (LoggingIn) {
	<MudAlert Severity="Severity.Info">
		Attempting to login. Please wait...
	</MudAlert>
} else {
	<EditForm Model=Model>
		<DataAnnotationsValidator />
		<MudGrid>
			<MudItem xs="12">
				<MudCard Class="pa-8 ma-2">
					<MudCardHeader>
						<MudText Typo=Typo.h5>LOGIN</MudText>
					</MudCardHeader>
					<MudCardContent>
						<MudTextField T="string" Label="USER ID/EMAIL"
									  InputType="InputType.Email"
									  @bind-Value=Model.UserID /><br />
						<MudStack Row="true">
							<MudTextField T="string" Label="PASSWORD"
										  InputType="InputType.Password"
										  @bind-Value=Model.Password />
						</MudStack><br />
						@if (Error != string.Empty) {
							<MudAlert Severity="Severity.Error">@Error</MudAlert>
						}
					</MudCardContent>
					<MudCardActions>
						<MudButton Variant=Variant.Filled
								   Color=Color.Primary Class="ml-auto"
								   OnClick=LoginAsync>LOGIN</MudButton>
					</MudCardActions>
				</MudCard>
			</MudItem>
		</MudGrid>
	</EditForm>
}

@code {
	LoginInfo Model { get; set; } = new();
	string Error { get; set; } = string.Empty;
	bool LoggingIn { get; set; } = false;

	async Task LoginAsync() {
		try {
			LoggingIn = true;
			Error = string.Empty;
			await ParticipantDataService.SignInAsync(Model.UserID, Model.Password);
			NavigationManager.NavigateTo("/");
		} catch (Exception ex) {
			Error = $"Login failed. {ex.Message}";
		} finally {
			LoggingIn = false;
		}
	}

	protected override async Task OnInitializedAsync() {
		if (Environment.IsDevelopment())
			await ParticipantDataService.InitializeAsync();
	}
}
